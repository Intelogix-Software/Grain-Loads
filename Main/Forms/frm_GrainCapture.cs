using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Columns;
using Main.Classes;
using Main.Forms;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using DevExpress.XtraPrinting;
using DropboxITX;

namespace Main
{
    public partial class Grain_Capture : DevExpress.XtraEditors.XtraForm
    {
        public GrainLoadPickup ne{ get; set; }
        /// <summary>
        /// declarar Grain Load(usar la estrucura en pickupcapture para ser enviado a delivery por medio del row seleccionado.
        /// </summary>
        public Grain_Capture()
        {
            InitializeComponent();
            splashScreenManager1.ShowWaitForm();
            TopLevel = true;
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            SDS_DateColumns.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            SDS_GrainLoadsGRID.Fill();
            splashScreenManager1.CloseWaitForm();
        }
        private void simpleButton1_Click(object sender, EventArgs e)
        {
            frm_PickupCapture it = new frm_PickupCapture();
            it.ShowDialog();
            if (it.DialogResult== DialogResult.OK)
            {
                Console.WriteLine(it.newentry.id_customer.ToString());
                SQL.SQlCon conn = new SQL.SQlCon();

                conn.sendPickupToSQL(it.newentry);

                if(it.filename!= null)
                {
                    //----------------------------------------------------------------------------------
                    DropITX.Save("itxDocuments/Sistemas/NewFolder", it.filename);
                }
                updateGrid();
            }
        }

        private void repositoryItemButtonEdit1_Click(object sender, EventArgs e)
        {
            int idr;
            idr = grv_Grainloads.GetFocusedDataSourceRowIndex();
            Console.WriteLine(idr);
            Guid idg = (Guid)grv_Grainloads.GetFocusedRowCellValue("ID_GrainLoad");
            Console.WriteLine(idg.ToString());
        }
        private GrainLoadPickup setPickupLoad()
        {

            if (grv_Grainloads.SelectedRowsCount == 1)
            {
                foreach (GridColumn i in grv_Grainloads.Columns)
                {
                    Console.WriteLine(i.FieldName.ToString());

                }
            //CHGEEEEEEEEEEEEEEE
                ne = new GrainLoadPickup();
                ne.id_grainload = (Guid)grv_Grainloads.GetFocusedRowCellValue("ID_GrainLoad");
                ne.release = grv_Grainloads.GetFocusedRowCellValue("Release").ToString();
                ne.factura = grv_Grainloads.GetFocusedRowCellValue("Factura").ToString();
                ne.id_driver = (Guid)grv_Grainloads.GetFocusedRowCellValue("ID_Driver");
                ne.driverName = (string)grv_Grainloads.GetFocusedRowCellValue("Driver");
                //
                Console.WriteLine("+"+ ne.driverName);
                ne.pickup_date = (DateTime)grv_Grainloads.GetFocusedRowCellValue("Pickup_Date");
                ne.id_customer = (Guid)grv_Grainloads.GetFocusedRowCellValue("ID_Customer");
                ne.customer = (string)grv_Grainloads.GetFocusedRowCellValue("CustomerName");
                Console.WriteLine(ne.customer);
                ne.pickup_ticket = grv_Grainloads.GetFocusedRowCellValue("Pickup_Ticket").ToString();
                ne.id_pickup_location = (Guid)grv_Grainloads.GetFocusedRowCellValue("ID_Pickup_Location");
                ne.Description_Pickup_Location = (string)grv_Grainloads.GetFocusedRowCellValue("PickupLocation");
                ne.id_grainType = (Guid)grv_Grainloads.GetFocusedRowCellValue("ID_GrainType");
                ne.name_graintype = (string)grv_Grainloads.GetFocusedRowCellValue("GrainType");
                ne.gross_pickup = Convert.ToInt32(grv_Grainloads.GetFocusedRowCellValue("Gross_Pickup"));
                ne.tare_pickup = Convert.ToInt32(grv_Grainloads.GetFocusedRowCellValue("Tare_Pickup"));
                ne.neto_pickup = Convert.ToInt32(grv_Grainloads.GetFocusedRowCellValue("Neto_Pickup"));
                ne.regdate = DateTime.Now;
            }
            Console.WriteLine(ne.release);
            return ne;
        }
        private void updateGrid()
        {
            SDS_GrainLoadsGRID.ClearRows();
            DevExpress.DataAccess.Sql.QueryParameter queryParameter1 = 
                new DevExpress.DataAccess.Sql.QueryParameter();
            queryParameter1.Name = "@SDate";
            queryParameter1.Type = typeof(DateTime);
            queryParameter1.Value = (DateTime)dedt_Low.DateTime;
            DevExpress.DataAccess.Sql.QueryParameter queryParameter2 = 
                new DevExpress.DataAccess.Sql.QueryParameter();
            queryParameter2.Name = "@EDate";
            queryParameter2.Type = typeof(DateTime);
            queryParameter2.Value = (DateTime)dedt_Top.DateTime;
            DevExpress.DataAccess.Sql.QueryParameter queryParameter3 = 
                new DevExpress.DataAccess.Sql.QueryParameter();
            queryParameter3.Name = "@DateColumn";
            queryParameter3.Type = typeof(string);
            queryParameter3.Value = (string)lue_dateFilter.Text;
            SDS_GrainLoadsGRID.Queries[0].Parameters.Clear();
            SDS_GrainLoadsGRID.Queries[0].Parameters.Add(queryParameter1);
            SDS_GrainLoadsGRID.Queries[0].Parameters.Add(queryParameter2);
            SDS_GrainLoadsGRID.Queries[0].Parameters.Add(queryParameter3);
            SDS_GrainLoadsGRID.Fill();
        }
        private void simpleButton2_Click(object sender, EventArgs e)
        {
            if (grv_Grainloads.SelectedRowsCount == 1)
            {
                Guid idg2 = (Guid)grv_Grainloads.GetFocusedRowCellValue("ID_GrainLoad");
                frm_DeliveryCapt it2 = new frm_DeliveryCapt(setPickupLoad(),idg2);
                it2.ShowDialog();
                if (it2.DialogResult == DialogResult.OK)
                {
                    Console.WriteLine(it2.GLP.id_grainload);
                    SQL.SQlCon con = new SQL.SQlCon();
                    con.sendDeliveryToSQL(it2.extentry);
                    updateGrid();
                    if (it2.filenameD != null)
                    {
                        //-------------------------------------------------------------------------------
                        DropITX.Save("itxDocuments/Sistemas/NewFolder", it2.filenameD);
                    }
                    if (it2.filenameP != null)
                    {
                        DropITX.Save("itxDocuments/Sistemas/NewFolder", it2.filenameP);
                    }
                }
            }
            else
            {
                MessageBox.Show("Test");
            }
        }
        private void btn_notes_Click(object sender, EventArgs e)
        {
            if (grv_Grainloads.SelectedRowsCount == 1)
            {
                Guid idg2 = (Guid)grv_Grainloads.GetFocusedRowCellValue("ID_GrainLoad");
                frm_Notes it3 = new frm_Notes(idg2);
                it3.ShowDialog();
                if (it3.DialogResult == DialogResult.OK)
                {
                    
                    SQL.SQlCon con = new SQL.SQlCon();
                    Console.WriteLine(it3.extentry.Notes);
                    con.sendNotesToSQL(it3.extentry);

                    updateGrid();
                }
            }
            else
            {
                MessageBox.Show("Test");
            }

        }
        private void grv_Grainloads_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            
            
        }

        private void dateEdit2_Closed(object sender, DevExpress.XtraEditors.Controls.ClosedEventArgs e)
        {
            
            if (dedt_Top.DateTime != DateTime.MinValue && dedt_Low.DateTime != DateTime.MinValue)
            {
                if ((lue_dateFilter.ItemIndex>=0) && dedt_Low.DateTime <= dedt_Top.DateTime)
                {
                    updateGrid();
                    //Console.WriteLine("good");
                }
                else {  }
            }
            else {  }
        }

        private void dateEdit1_Closed(object sender, DevExpress.XtraEditors.Controls.ClosedEventArgs e)
        {
            if (dedt_Top.DateTime != DateTime.MinValue && dedt_Low.DateTime != DateTime.MinValue)
            {
                if (lue_dateFilter.ItemIndex>=0 && dedt_Low.DateTime <= dedt_Top.DateTime)
                {
                    updateGrid();
                }
                else {  }
            }
            else {  }
        }

        private void lue_dateFilter_Closed(object sender, DevExpress.XtraEditors.Controls.ClosedEventArgs e)
        {
           
            if (dedt_Top.DateTime!= DateTime.MinValue && dedt_Low.DateTime!= DateTime.MinValue)
            {
                if (lue_dateFilter.ItemIndex >= 0 && dedt_Low.DateTime <= dedt_Top.DateTime)
                {
                    updateGrid();
                }
                else { }
            }
            else {  }
        }

       

        private void grv_Grainloads_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            setPickupLoad();

            Console.WriteLine(ne.id_grainload);
        }

        private void simpleButton3_Click(object sender, EventArgs e)
        {
            XlsxExportOptionsEx advOptions = new XlsxExportOptionsEx();
            advOptions.AllowGrouping = DevExpress.Utils.DefaultBoolean.False;
            advOptions.ShowTotalSummaries = DevExpress.Utils.DefaultBoolean.False;
            advOptions.SheetName = "Exported from GrainLoadsApp";
            string xlsxExportFile =
                Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) +
                @"\Downloads\" +
                "TEST" +
                ".xlsx";
            grc_GrainLoads.ExportToXlsx(xlsxExportFile,advOptions);

        }

        private void Grain_Capture_Load(object sender, EventArgs e)
        {
            
        }

        private void grc_GrainLoads_Click(object sender, EventArgs e)
        {

        }
    }
}