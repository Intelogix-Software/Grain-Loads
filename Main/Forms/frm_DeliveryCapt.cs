using DevExpress.XtraEditors;
using DropboxITX;
using Main.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Main.Forms
{
    public partial class frm_DeliveryCapt : DevExpress.XtraEditors.XtraForm 
    {
        public GrainLoadDelivery extentry { get; set; }
        public GrainLoadPickup GLP { get; set; }
        public Guid ID_grainload { get; set; }
        public string filenameD { get; set; }
        public string filenameP { get; set; }
        public Image myImage; 
        public frm_DeliveryCapt(GrainLoadPickup sglp, Guid Id_GrainLoad)
        {
            InitializeComponent();
            Console.WriteLine(sglp.id_grainload);
            GLP = sglp;
            ID_grainload = Id_GrainLoad;
            splashScreenManager1.ShowWaitForm();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            SDS_Customers.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            SDS_Drivers.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            SDS_PickupLocations.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            SDS_GrainType.Fill();
            splashScreenManager1.CloseWaitForm();
        }
        private void simpleButton2_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog();
            if (ofd.ShowDialog() == DialogResult.OK)
            {
                filenameD = ofd.FileName;
                DropITX.DownloadImageMS("itxDocuments/Sistemas", "Catching.JPG", out myImage);
                pictureEdit2.Image = myImage;
            }
        }
        private void frm_DeliveryCapt_Load(object sender, EventArgs e)
        {
            edt_release.Text = GLP.release;
            edt_factura.Text = GLP.factura;
            lue_driver.EditValue = GLP.id_driver;
            lue_driver.Text = GLP.driverName;
            dte_Pickup.EditValue = GLP.pickup_date;
            lue_customer.EditValue = GLP.id_customer;
            edt_pickupticket.Text = GLP.pickup_ticket;
            lue_locationPickup.EditValue = GLP.id_pickup_location;
            //lue_locationPickup.Text = GLP.Description_Pickup_Location;
            lue_GrainType.EditValue = GLP.id_grainType;
            //lue_GrainType.Text = GLP.name_graintype;
            edt_grossPickup.Text=GLP.gross_pickup.ToString();
            edt_tarePickup.Text = GLP.tare_pickup.ToString();
            edt_netoPickup.Text = GLP.neto_pickup.ToString();
        }

        private void btn_SaveDelivery_Click(object sender, EventArgs e)
        {
            extentry = new GrainLoadDelivery();
            extentry.id_grainload = ID_grainload;
            extentry.delivery_date = dedt_DeliveryDate.DateTime;
            extentry.delivery_ticket = edt_DeliveryTicket.Text;
            extentry.id_delivery_location = (Guid)lue_deliveryLocation.EditValue;
            extentry.gross_delivery = Convert.ToInt32(edt_grossDelivery.Text);
            extentry.tare_delivery = Convert.ToInt32(edt_tareDelivery.Text);
            extentry.neto_delivery = Convert.ToInt32(edt_netoDelivery.Text);
            extentry.weight = Convert.ToInt32(edt_weight.Text);
            extentry.totalprice = Convert.ToInt32(edt_totalPrice.Text);
            extentry.id_who = Guid.Parse(Properties.Settings.Default.Id_who);
            extentry.updateDate = DateTime.Now;
            this.DialogResult = DialogResult.OK;
            this.Close();
        }
        private void edt_netoDelivery_EditValueChanged(object sender, EventArgs e)
        {
            if (edt_netoPickup.Text != null)
            {
                //edt_weight=edt_netoPickup.Text-edt_netoDelivery.Text
            }
        }

        private void btn_pickupDropbox_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog();
            if (ofd.ShowDialog() == DialogResult.OK)
            {
                filenameP = ofd.FileName;
                DropITX.DownloadImageMS("itxDocuments/Sistemas", "Catching.JPG", out myImage);
                pictureEdit1.Image = myImage;
            }
        }
    }
}